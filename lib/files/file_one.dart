



List<String> titles = [

  '1. Introduction',
  '2. C++ Basics',
  '3. Control Statements',
];


List<String> texts = [

'1.1 COMPUTER BASICS\n\n'
'Computer:\n\n'
'•	Device capable of performing computations and making logical decisions'
'•	Computers process data under the control of sets of '
'instructions called computer programs\n\n'
'Hardware: - Various devices comprising a computer'
'Keyboard, screen, mouse, disks, memory, CD-ROM, & processing units'
'Software: Programs that run on a computer\n\n'
'Five logical units in every computer:\n\n'
'•	Input unit:-Obtains information from input devices (keyboard, mouse)\n'
'•	Output unit: Outputs information (to screen, to printer, to control other devices)\n'
'•	Memory unit :-Rapid access, low capacity, stores input information\n'
'•	Arithmetic and logic unit (ALU) : -Performs arithmetic calculations and logic decisions\n'
'•	Control Unit(CU):-  Supervises and coordinates the other sections of the computer\n'
'•	Secondary storage unit :-Cheap, long-term, high-capacity storage\n'
' Stores inactive programs\n\n'
'1.2.	Computer Languages\n\n'
'•	One complete unit of communication:\n'
'•	An idea to be sent.\n'
'•	An encoder.\n'
'•	A sender.\n'
'•	A medium.\n'
'•	A receiver.\n'
'•	A decoder.\n'
'•	A response.\n\n'

'1.3.	Programming Paradigms\n\n'

'As might be expected in a dynamic and evolving field, there is no '
'single standard for classifying programming languages. Another '
'most fundamental ways programming languages are characterized '
'(categorized) is by programming paradigm. A programming paradigm' 
'provides the programmer\'s view of code execution. The most '
'influential paradigms are examined in the next three sections, '
'in approximate chronological order.\n\n'
'1.3.1.	Procedural Programming Languages\n\n'

'Procedural programming specifies a list of operations that the '
'program must complete to reach the desired state. Each program has' 
'a starting state, a list of operations to complete, and an ending '
'point. This approach is also known as imperative programming.'
'Integral to the idea of procedural programming is the concept of a' 
'procedure call.\n\n'
'Procedures, also known as functions, subroutines, or methods,' 
'are small sections of code that perform a particular function. '
'A procedure is effectively a list of computations to be carried out. '
'Procedural programming can be compared to unstructured programming, '
'where all of the code resides in a single large block. By splitting '
'the programmatic tasks into small pieces, procedural programming '
'allows a section of code to be re-used in the program without making '
'multiple copies. It also makes it easier for programmers to understand '
'and maintain program structure.\\n'
'Two of the most popular procedural programming languages are '
'FORTRAN and BASIC.\n\n'

'1.3.2.	Structured Programming Languages\n\n'

'Structured programming is a special type of procedural programming. '
'It provides additional tools to manage the problems that larger '
'programs were creating. Structured programming requires that '
'programmers break program structure into small pieces of code that'
'are easily understood. It also frowns upon the use of global variables' 
'and instead uses variables local to each subroutine. \n\nOne of the' 
'well-known features of structural programming is that it does not '
'allow the use of the GOTO statement. It is often associated with a '
'"top-down" approach to design. The top-down approach begins with an' 
'initial overview of the system that contains minimal details about' 
'the different parts. Subsequent design iterations then add increasing '
'detail to the components until the design is complete. The most '
'popular structured programming languages include C, Ada, and Pascal.\n\n'

'1.6.3.	Object-Oriented Programming Languages\n\n'

'Object-oriented programming is one the newest and most powerful '
'paradigms. In object- oriented programs, the designer specifies '
'both the data structures and the types of operations that can be '
'applied to those data structures. This pairing of a piece of data'
'with the operations that can be performed on it is known as an' 
'object. A program thus becomes a collection of cooperating objects,'
'rather than a list of instructions. Objects can store state '
'information and interact with other objects, but generally each object' 
'has a distinct, limited role.',



'2.1 Reserved/Key words\n\n'
'Reserved/Key words have a unique meaning within a C++ program. These symbols, the reserved words, must not be used for any other purposes. All reserved words are in lower-case letters. The following	are some of the reserved words of C++.\n\n'
'- asm	    - continue\n'
'- auto	    - default\n'
'- boo      - do\n'
'- break    -	double\n'
'- case	    - delete\n'
'- catch     -float\n'
'- const_cast   -	else\n'
'- class    -	enum\n'
'- const    -	false\n'
'- char		  - for\n\n'

'2.2	Identifiers \n\n'
'An identifier is name associated with a '
'function or data object and used to refer to that function or' 
'data object.\n An identifier must: \n\n'
'- Start with a letter or underscore\n'
'- Consist only of letters, the digits 0-9, or the underscore symbol _\n'
'- Not be a reserved word\n\n'
'For the purposes of C++ identifiers, the underscore symbol, _, is considered to be a letter. Its use as the first character in an identifier is not recommended though, because many library functions in C++ use such identifiers. Similarly, the use of two consecutive underscore symbols, _ _, is forbidden.\n\n'
'2.3	Literals\n\n'
'Literals are constant values which can be a number, a character of a string. For example the number 129.005, the character ‘A’ and the string “hello world” are all literals. There is no identifier that identifies them.\n\n'
'2.4	Comments\n\n'
'A comment is a piece of descriptive text which explains some aspect of a program. Program comments are totally ignored by the compiler and are only intended for human readers. C++ provides two types of comment delimiters:\n\n'
'-	Anything after "// (until the end of the line on which it appears)" is considered a comment.\n' 
'-	Anything enclosed by the pair /* and */ is considered a comment\n\n'
'2.5.	Data Types, Variables, and Constants\n\n'
'2.5.1.	Variables\n\n'
'A variable is a symbolic name for a memory location in which data can be stored and subsequently recalled. Variables are used for holding data values so that they can be utilized in various computations in a program. All variables have two important attributes:'
'	A type, which is, established when the variable is defined (e.g., integer, float, character). Once defined, the type of a C++ variable cannot be changed.'
'	A value, which can be changed by assigning a new value to the variable. The kind of values a variable can assume depends on its type. For example, an integer variable can only take integer values (e.g., 2, 100, -12) not real numbers like 0.123.\n\n'
'Variable Declaration\n\n'
'Declaring a variable means defining (creating) a variable. You create or define a variable by stating its type, followed by one or more spaces, followed by the variable name and a semicolon. The variable name can be virtually any combination of letters, but cannot contain spaces and the first character must be a letter or an underscore. Variable names cannot also be the same as keywords used by C++. Legal variable names include x, J23qrsnf, and myAge. Good variable names tell you what the variables are for; using good names makes it easier to understand the flow of your program. The following statement defines an integer variable called myAge: \n\n          int myAge\n\n'
'IMPORTANT- Variables must be declared before used!\n'
'As a general programming practice, avoid such horrific names as J23qrsnf, and restrict single-letter variable names (such as x or i) to variables that are used only very briefly. Try to use expressive names such as myAge or howMany.\n\n'

'2.5.2.	Basic Data Types\n\n'
'When you define a variable in C++, you must tell the compiler what kind of variable it is: an integer, a character, and so forth. This information tells the compiler how much room to set aside and what kind of value you want to store in your variable.'
'Several data types are built into C++. The varieties of data types allow programmers to select the type appropriate to the needs of the applications being developed. The data types supported by C++ can be classified as basic (fundamental) data types, user defined data types, derived data types and empty data types. However, the discussion here will focus only on the basic data types.'
'Basic (fundamental) data types in C++ can be conveniently divided into numeric and character types. Numeric variables can further be divided into integer variables and floating-point variables. Integer variables will hold only integers whereas floating number variables can accommodate real numbers.\n\n' 
'Both the numeric data types offer modifiers that are used to vary the nature of the data to be stored. The modifiers used can be short, long, signed and unsigned.'  
'The data types used in C++ programs are described in Table 1.1. This table shows the variable type, how much room it takes in memory, and what kinds of values can be stored in these variables. The values that can be stored are determined by the size of the variable types.\n\n'

'- unsigned short int        - char\n'
'- short int (signed)        - float\n'
'- long int (signed)         - double\n'
'- int                       - long double\n'
'- unsigned int\n'
'- signed int\n',




 '3.1	Introduction\n\n' 
'A running program spends all of its time executing statements. The order in which statements are executed is called flow control (or control flow). This term reflect the fact that the currently executing statement has the control of the CPU, which when completed will be handed over (flow) to another statement. Flow control in a program is typically sequential, from one statement to the next, but may be diverted to other paths by branch statements. Flow control is an important consideration because it determines what is executed during a run and what is not, therefore affecting the overall outcome of the program.\n\n'
'Like many other procedural languages, C++ provides different forms of statements for different purposes. Declaration statements are used for defining variables. Assignment-like statements are used for simple, algebraic computations. Branching statements are used for specifying alternate paths of execution, depending on the outcome of a logical condition. Loop statements are used for specifying computations, which need to be repeated until a certain logical condition is satisfied. Flow control statements are used to divert the execution path to another part of the program. We will discuss these in turn.\n\n'

'3.2.	Conditional Statements\n'
'3.2.1.	The if Statement\n'
'It is sometimes desirable to make the execution of a statement dependent upon a condition being satisfied. The if statement provides a way of expressing this, the general form of which is:\n'	
'if (expression)\n'
'		statement;\n'
'First expression is evaluated. If the outcome is nonzero (true) then statement is executed. Otherwise, nothing happens.\n\n'
'For example, when dividing two values, we may want to check that the denominator is nonzero:\n\n'

'if (count != 0)\n'
'	average = sum / count;\n'
'To make multiple statements dependent on the same condition, we can use a compound statement:\n\n'
'if (balance > 0) {\n\n'
'	interest = balance * creditRate;\n'
'	balance += interest;\n'
'}\n\n'
'A variant form of the if statement allows us to specify two alternative statements: one which is executed if a condition is satisfied and one which is executed if the condition is not satisfied. This is called the if-else statement and has the general form:\n\n'
'	if (expression)\n'
'		statement1;\n'
'	else\n'
'		statement2;\n'
'First expression is evaluated. If the outcome is nonzero (true) then statement1 is executed. Otherwise, statement2 is executed.\n\n'
'	For example:\n\n'

'if (balance > 0) {\n\n'
'	interest = balance * creditRate;\n'
'	balance += interest;\n'
'} else {\n\n'
'	interest = balance * debitRate;\n'
'	balance += interest;\n'
'}\n'
'Given the similarity between the two alternative parts, the whole statement can be simplified to:\n\n'

'if (balance > 0)\n'
'	interest = balance * creditRate;\n'
'else\n'
'	interest = balance * debitRate;\n'
'balance += interest;\n'

'Or simplified even further using a conditional expression:\n'
'interest = balance * (balance > 0 ? creditRate : debitRate);\n'
'balance += interest;\n'

'Or just:\n'

'balance += balance * (balance > 0 ? creditRate : debitRate);\n'

'If statements may be nested by having an if statement appear inside another if statement. For example:\n\n'
'if (callHour > 6) {\n\n'
'	if (callDuration <= 5)\n'
'		charge = callDuration * tarrif1;\n'
'	else\n'
'		charge = 5 * tarrif1 + (callDuration - 5) * tarrif2;\n'
'} else\n'
'	charge = flatFee;\n'
'A frequently-used form of nested if statements involves the else part consisting of another if-else statement. For example:\n\n'
'if (ch >= \'0\' && ch <= \'9\')\n'
'	kind = digit;\n'
'else {\n\n'
'	if (ch >= \'A\' && ch <= \'Z\')\n'
'		kind = upperLetter;\n'
'	else {\n\n'
'		if (ch >= \'a\' && ch <= \'z\')\n'
'			kind = lowerLetter;\n'
'		else\n'
'			kind = special;\n'
'	}\n'
'}\n\n'
'For improved readability, it is conventional to format such cases as follows:\n\n'
'if (ch >= \'0\' && ch <= \'9\')\n'
'	kind = digit;\n'
'else if (cha >= \'A\' && ch <= \'Z\')\n'
'	kind = capitalLetter;\n'
'else if (ch >= \'a\' && ch <= \'z\')\n'
'	kind = smallLetter;\n'
'else\n\n'
'	kind = special;\n\n'

'3.2.2.	The switch Statement\n\n'
'The switch statement provides a way of choosing between a set of alternatives, based on the value of an expression. The general form of the switch statement is:\n\n'

'	switch (expression) {\n\n'
'		case constant1:\n'
'			statements;\n'
'		...\n'
'		case constantn:\n'
'			statements;\n'
'		default:\n'
'			statements;\n\n'
'	} \n\n'

'First expression (called the switch tag) is evaluated, and the outcome is compared to each of the numeric constants (called case labels), in the order they appear, until a match is found. The statements following the matching case are then executed. Note the plural: each case may be followed by zero or more statements (not just one statement). Execution continues until either a break statement is encountered or all intervening statements until the end of the switch statement are executed. The final default case is optional and is exercised if none of the earlier cases provide a match.\n\n'
'For example, suppose we have parsed a binary arithmetic operation into its three components and stored these in variables operator, operand1, and operand2. The following switch statement performs the operation and stores the result in result.\n\n'

'switch (operator) {\n\n'
'	case +:	result = operand1 + operand2;\n'
'				break;\n'
'	case -:	result = operand1 - operand2;\n'
'				break;\n'
'	case *:	result = operand1 * operand2;\n'
'				break;\n'
'	case /:	result = operand1 / operand2;\n'
'				break;\n'
'	default:	cout << "unknown operator: " << ch << endl\n;'
'				break;\n'
'}\n\n'

'3.3.	Looping Statements\n\n'
'3.3.1.	The ‘while’ Statement \n\n'

'The while statement (also called while loop) provides a way of repeating a statement while a condition holds. It is one of the three flavors of iteration in C++. The general form of the while statement is:\n\n'

'	while (expression)'
'		statement;'

'First expression (called the loop condition) is evaluated. If the outcome is nonzero then statement (called the loop body) is executed and the whole process is repeated. Otherwise, the loop is terminated.\n\n'
'For example, suppose we wish to calculate the sum of all numbers from 1 to some integer denoted by  n. This can be expressed as:\n\n'

'i = 1;\n'
'sum = 0;\n'
'while (i <= n)\n'
'	sum += i;'


];